os.loadAPI("commonFunctions")
os.loadAPI("gooey")

function RedstoneStatusMenu(target)
	setMenu = {	{["text"] = "Get current status",["func"] = GetRedstone, ["params"] = {target}},
				{["text"] = "Set simple status",["func"] = SetRedstone, ["params"] = {target,"simple"}},
				{["text"] = "Set analog status",["func"] = SetRedstone, ["params"] = {target,"analog"}},
				{["text"] = "Set bundled status",["func"] = SetRedstone, ["params"] = {target,"bundled"}},
				{["text"] = "Cancel", ["func"] = Cancel}}
	if term.isColor() then
		gooey.clickMenu("Select action to perform on " .. target,setMenu)
	else
		commonFunctions.menu(setMenu, "Select action to perform on " .. target)
	end
end

function GetRedstone(targetID)
	rednet.send(targetID,"Status","Command")
	idRx = targetID + 1
	while idRx ~= targetID do
		print("Waiting for reposnse from computer " .. targetid)
		idRx, rsTable = rednet.receive("Redstone", 2)
	end
	if idRx ~= nil then
		term.clear()
		term.cursorPos(1,1)
		print("Redstone status of computer " .. idRx)
		for side, value in pairs(rsTable) do
			print (side .. " = " .. value)
		end
	else
		print( "No repsonse from computer " .. targetid)
	end
	print("Enter to return to main menu")
	read()
end

function SetRedStone(targetID,redstoneType)
	outputTable = {}
	sideSelect = rs.getSides()
	table.insert(sideSelect,"Default")
	sideIndex = commonFunctions.menu(sideSelect,"Select Output Side")
	if sideSelect[sideSideindex] ~=  "Default" then
		outputTable.Side = sideSelect[sideSideindex]
	end
	if redstoneType == "simple" then
		simpleMenu = {"On","Off"}
		result = commonFunctions.menu(simpleMenu,"Select Redstone Status")
		if result == 1 then
			outputTable.Value = true
		else
			outputTable.Value  = false
		end
	elseif redstoneType == "analog" then
		term.clear()
		term.setCursorPos(1,1)
		print("Enter analog output value")
		outputTable.Value = read()
	elseif redstoneType == "bundled" then
		term.clear()
		term.setCursorPos(1,1)
		print("Not yet implemented. Enter to continue")
		read()
	end
	rednet.send(targetID,outputTable,"Redstone")
end

function PickRemote() -- Find possible remote redstones, use them
	pickMenu = {}
	print("Finding and identifying remote redstone clients")
	for i,id in pairs {rednet.lookup("Redstone")} do
		idRx = id -1
		rednet.send(id,"Identify","Command")
		print("Waiting for response from computer" .. id)
		while id ~= idRx and idRx ~= nil do
			idRx, name = rednet.receive("Command",1)
		end
		if idRx ~= nil then
			table.insert(pickMenu,{["text"] =  name, ["func"]= RedstoneStatusMenu,["params"] = {id}})
		else
			print ("No respone from " .. id)
			table.insert(pickMenu,{["text"] =  "Uknown, ID = " ..id, ["func"]= RedstoneStatusMenu,["params"] = {id}})
		end
	end
	table.insert(pickMenu,{["text"] = "Refresh list", ["func"] = Cancel})
	commonFunctions.menu(pickMenu,"Select remote redstone to interact with")
end

function Cancel()
	--Do nothing (for menu purposes)
end

function main()
	print("Finding modem")
	for i,side in pairs(peripheral.getNames()) do
		if peripheral.getType(side) == "modem" then
			modemFound = true
			rednet.open(side)
			print("Found modem on " .. side)
		end
	end
	if not modemFound then
		return "No modem found for contacting remote machine"
	end
	continue = true
	while continue do
		PickRemote()
	end
end

print(main())