os.loadAPI("commonFunctions")
os.loadAPI("gooey")

--This program is just for monitoring the status of rotarycraft devices.

local Devices
local DeviceSides
local mon = term
local InMenu = false
local continue = true

function AddDevice(deviceSide)
	term.clear()
	gooey.writeAt(1,1,"Enter a name for this " .. peripheral.call(deviceSide,"getName"))
	print()
	devName = read()
	print(devName)
	Devices[devName] = peripheral.wrap(deviceSide)
	DeviceSides[devName] = deviceSide
	--commonFunctions.saveData(Devices,"rotaryMonitors")
end

function PickDevice()
	periphs = peripheral.getNames()
	menuItems = {}
	for k,v in pairs(periphs) do
		periphFound = peripheral.wrap(v)
		if periphFound["getPower"] ~= nil then
			table.insert(menuItems,{["func"] = AddDevice, ["text"] = periphFound.getName() .. " at " .. periphFound.getCoords(),["params"] = {v}})
		end
	end
	if term.isColor() then
		gooey.clickMenu("Pick a device to monitor",menuItems)
	else
		commonFunctions.menu(menuItems, "Pick a device to monitor")
	end
end

function DisplayLoop()
	while continue do
		Display()
		sleep(Settings["updateRate"])
	end
end

function Display()
	width, height = mon.getSize()
	items = 0
	linesNeeded = 4
	if not (menu == term and InMenu) then
		if Devices ~= nil then
			for name,rotaryItem in pairs(Devices) do
				gooey.writeAt(1,items * linesNeeded + 1,name .. " a " .. rotaryItem.getName() .. " at " .. rotaryItem.getCoords())
				power, speed, torque = rotaryItem.getPower()
				gooey.writeAt(1,items * linesNeeded + 2,"Power: " .. power .. "W")
				gooey.writeAt(1,items * linesNeeded + 3,"Speed: " .. speed .. "rpm")
				gooey.writeAt(1,items * linesNeeded + 4,"Torque: " .. torque .. "Nm")
				items = items + 1
			end
		end
		if mon == term then
			gooey.writeAt(1,height,"Press enter to bring up menu")
		end
	end
end

function UserInterface()
	while continue do
		if mon == term then -- If we're on the same screen as the info, then let the display loop look after itself
			read()
		end
		
		InMenu = true
		local menuItems = {{["text"] = "Add machine to monitor", ["func"] = PickDevice}}
		if term.isColor() then
			gooey.clickMenu("Main Menu",menuItems)
		else
			commonFunctions.menu(menuItems,"Main Menu")
		end
		InMenu = false
	end
end

function SelectDisplay()
	monitors = commonFunctions.findAllPeripherals("monitor")
	menuItems = {{["text"] = "Teminal screen", ["func"] = SetDisplay, ["params"] = {"term"}}}
	for side, mon in pairs(monitors) do
		table.insert(menuItems,{["text"] = side, ["func"] = SetDisplay, ["params"] = {side}}
	end
	if term.isColor() then
	if term.isColor() then
		gooey.clickMenu("Select display for monitors",menuItems)
	else
		commonFunctions.menu(menuItems,"Select Display for monitors")
	end
end

function SetDisplay(displaySide)
	if displaySide == "term" then
		mon = term
	else
		mon = peripheral.wrap(displayside)
	end
	Settings["display"] = displaySide
	commonFunctions.saveData(Settings,"RotMonSettings")
end

function RemoveDevice()
	--to be implemented
end

function Main()
	LoadMonitors()
	settings = commonFuntions.loadData("RotMonSettings")
	if settings == nil then
		settings["display"] = "term"
		settings["updateRate"] = 5
	end
	SetDisplay(settings["display"])
	while continue do
		parallel.waitForAny(DisplayLoop, UserInterface)
	end
	return "Program Ended"
end



function LoadMonitors()
	DeviceSides = commonFunctions.loadData("RotaryMonitors") or {}
	Devices = {}
	if DeviceSides ~= nil then
		for devName, side in pairs(DeviceSides) do
			Devices[devName] = peripheral.wrap(side)
		end
	end
end

print(Main())
