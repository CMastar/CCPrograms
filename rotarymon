os.loadAPI("commonFunctions")
os.loadAPI("gooey")

--This program is just for monitoring the status of rotarycraft devices.


mon = term
InMenu = false
continue = true

function AddDevice(deviceSide, devName)
	-- Add a device (given that the side is already specified
	term.clear()
	if devName == nil then
		gooey.writeAt(1,1,"Enter a name for this " .. peripheral.call(deviceSide,"getName"))
		print()
		devName = read()
	end
	print(devName)
	Devices[devName] = peripheral.wrap(deviceSide)
	DeviceSides[devName] = deviceSide
	commonFunctions.saveData(DeviceSides,"rotaryMonitors")
end

function PickDevice()
	periphs = peripheral.getNames()
	menuItems = {}
	for k,v in pairs(periphs) do
		periphFound = peripheral.wrap(v)
		if periphFound["getPower"] ~= nil then
			x, y, z = periphFound.getCoords()
			table.insert(menuItems,{["func"] = AddDevice, ["text"] = periphFound.getName() ..  " at " .. x .. "," .. y .. "," .. z,["params"] = {v}})
		end
	end
	if term.isColor() then
		gooey.clickMenu("Pick a device to monitor",menuItems)
	else
		commonFunctions.menu(menuItems, "Pick a device to monitor")
	end
end

function DisplayLoop()
	while continue do
		Display()
		sleep(Settings["updateRate"])
	end
end

function Display()
	width, height = mon.getSize()
	items = 0
	linesNeeded = 4
	if not (mon == term and InMenu) then
		if Devices ~= nil then
			for name,rotaryItem in pairs(Devices) do
				x, y, z = rotaryItem.getCoords()
				gooey.writeAt(1,items * linesNeeded + 1,name .. " a " .. rotaryItem.getName() .. " at " .. x .. "," .. y .. "," .. z,mon)
				power, torque, speed = rotaryItem.getPower()
				gooey.writeAt(1,items * linesNeeded + 2,"Power: " .. power .. "W",mon)
				gooey.writeAt(1,items * linesNeeded + 3,"Speed: " .. speed .. "rpm",mon)
				gooey.writeAt(1,items * linesNeeded + 4,"Torque: " .. torque .. "Nm",mon)
				items = items + 1
			end
		end
		if mon == term then
			gooey.writeAt(1,height,"Press enter to bring up menu")
		end
	end
end

function UserInterface()
	while continue do
		if mon == term then -- If we're on the same screen as the info, then let the display loop look after itself
			read()
		end
		
		InMenu = true
		local menuItems = {	{["text"] = "Add machine to monitor", ["func"] = PickDevice},
							{["text"] = "Remove machine to monitor", ["func"] = RemoveDevices},
							{["text"] = "Set display to use", ["func"] = SelectDisplay}
							}
		if term.isColor() then
			gooey.clickMenu("Main Menu",menuItems)
		else
			commonFunctions.menu(menuItems,"Main Menu")
		end
		InMenu = false
	end
end

function SelectDisplay()
	monitors = commonFunctions.findAllPeripherals("monitor")
	menuItems = {{["text"] = "Teminal screen", ["func"] = SetDisplay, ["params"] = {"term"}}}
	for side, mon in pairs(monitors) do
		table.insert(menuItems,{["text"] = side, ["func"] = SetDisplay, ["params"] = {side}})
	end
	if term.isColor() then
		gooey.clickMenu("Select display for monitors",menuItems)
	else
		commonFunctions.menu(menuItems,"Select Display for monitors")
	end
end

function SetDisplay(displaySide)
	print(displaySide .. " is the display side")
	if displaySide == "term" then
		mon = term
	else
		mon = peripheral.wrap(displaySide)
	end
	Settings["display"] = displaySide
	commonFunctions.saveData(Settings,"RotMonSettings")
end

function RemoveDevices()
	removeList = {} 
	for devName, v in pairs(DeviceSides) do
		table.insert(removeList,{["text"] = devName, ["func"] = RemoveDevice, ["params"] = {devName}})
	end
	table.insert(removeList,{["text"] = "Cancel", ["func"] = Cancel})
	if term.isColor() then
		gooey.clickMenu("Select device to stop monitoring",removeList)
	else
		commonFunctions.menu(removeList,"Select device to stop monitoring")
	end
end

function RemoveDevice(devName)
	Devices[devName] = nil
	DeviceSides[devName] = nil
	commonfunctions.saveData(DeviceSides,"RotaryMonitors")
end

function Cancel()
	-- For menus where you don't want to do anything
end

function Main()
	LoadMonitors()
	Settings = commonFunctions.loadData("RotMonSettings")
	if Settings == nil then
		print("Creating default settings")
		Settings = {}
		Settings["display"] = "term"
		Settings["updateRate"] = 5
	end
	SetDisplay(Settings["display"])
	while continue do
		parallel.waitForAny(DisplayLoop, UserInterface)
	end
	return "Program Ended"
end



function LoadMonitors()
	DeviceSides = commonFunctions.loadData("RotaryMonitors") or {}
	Devices = {}
	if DeviceSides ~= nil then
		for devName, side in pairs(DeviceSides) do
			Devices[devName] = peripheral.wrap(side)
		end
	end
end

print(Main())
