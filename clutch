os.loadAPI("commonFunctions")
os.loadAPI("gooey")

local SideToUse

args = {...}




function SetOutput(OutputLevel)
	term.clear()
	gooey.writeAt(1,1,"Output (".. SideToUse .. ") set to " .. OutputLevel)
	if RealSide then
		redstone.setAnalogOutput(SideToUse, tonumber(OutputLevel))
	else
		local targetAddress = rednet.lookup("Redstone",SideToUse)
		if targetAddress == nil then
			print("Unable to find target computer " .. SideToUse)
			print("Retrying in 5 seconds")
			targetAddress = rednet.lookup("Redstone",SideToUse)
		end
		if targetAddress ~= nil then
			rednet.send(targetAddress,{["Value"] = tonumber(OutputLevel),["Side"] = args[2]},"Redstone")
		else
			print("Unable to send to remote redstone computer")
		end
	end
	commonFunctions.saveData({OutputLevel},"LastOutput")
	sleep(2)
end

function main()
	if args[1] == nil
	then
		return "Must specify side for redstone output"
	else
		SideToUse = args[1]
		print("Using " .. SideToUse .. " as outout side for redstone")
	end
	RealSide = false
	for k, side in pairs(rs.getSides()) do
		if side == SideToUse then
			RealSide = true
		end
	end
	if not RealSide then
		local modemFound = false
		for i,side in pairs(peripheral.getNames()) do
			if peripheral.getType(side) == "modem" then
				modemFound = true
				rednet.open(side)
			end
		end
		if not modemFound then
			return "No modem found for contacting remote machine"
		end
	end
	continue = true
	machines = commonFunctions.loadData("Machines")
	if machines == nil 
	then
		print "No machines file found"
		print "Enter to continue"
		machines = {}
		read()
	end
	
	lastOutput = commonFunctions.loadData("LastOutput")
	if lastOutput ~= nil then
		SetOutput(lastOutput[1])
	end
	
	while continue do
		 menuItems = {}
		for k, v in pairs(machines) do
			table.insert(menuItems,{["text"] = ("Enable " .. k) , ["func"] = SetOutput, ["params"] = {v}})
		end
		table.insert(menuItems,{["text"] = ("Add Machine") , ["func"] = AddNewMachine})
		table.insert(menuItems,{["text"] = ("Remove Machine") , ["func"] = RemoveMachines})
		table.insert(menuItems,{["text"] = ("Exit") , ["func"] = Exit})
		if term.isColor()
		then
			gooey.clickMenu("Clutch Control",menuItems, term)
		else
			commonFunctions.menu(menuItems, "Clutch Control")
		end
	end
	return "Program Complete"
end

function Exit()
	continue = false
end

function AddNewMachine()
	term.clear()
	term.setCursorPos(1,1)
	print("Enter Machine Name")
	machName = read()
	print("Enter redstone signal strength")
	sigStr = read()
	machines[machName] = sigStr
	print ("Saving")
	commonFunctions.saveData(machines,"Machines")
end

function RemoveMachines()
	removeMenu = {}
	for k,v in pairs(machines) do
		table.insert(removeMenu,{["text"] = (k) , ["func"] = RemoveMachine, ["params"] = {k}})
	end
	table.insert(removeMenu,{["text"] = "Cancel" , ["func"] = term.clear})
	if term.isColor()
	then
		gooey.clickMenu("Select Machine to Remove",removeMenu, term)
	else
		commonFunctions.menu(removeMenu,"Select Machine to Remove")
	end
end

function RemoveMachine(machineName)
	machines[machineName] = nil
	print ("Saving")
	commonFunctions.saveData(machines,"Machines")
end

print(main())